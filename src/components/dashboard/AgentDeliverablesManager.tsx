
import React from 'react';
import { useAgentDeliverables } from '@/hooks/useAgentDeliverables';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { 
  FileText, 
  Download, 
  Eye, 
  File,
  Image,
  FileCode,
  Package
} from 'lucide-react';
import { formatDistanceToNow } from 'date-fns';
import { es } from 'date-fns/locale';

interface AgentDeliverablesManagerProps {
  agentId: string;
  language: 'en' | 'es';
}

export const AgentDeliverablesManager: React.FC<AgentDeliverablesManagerProps> = ({
  agentId,
  language
}) => {
  const { deliverables, loading } = useAgentDeliverables(agentId);

  const t = {
    en: {
      deliverables: "Deliverables",
      noDeliverables: "No deliverables yet",
      createFirst: "Deliverables will appear here when generated by the agent",
      view: "View",
      download: "Download",
      createdAt: "Created",
      fileType: "Type"
    },
    es: {
      deliverables: "Entregables",
      noDeliverables: "No hay entregables aún",
      createFirst: "Los entregables aparecerán aquí cuando los genere el agente",
      view: "Ver",
      download: "Descargar",
      createdAt: "Creado",
      fileType: "Tipo"
    }
  };

  const getFileIcon = (fileType: string) => {
    switch (fileType.toLowerCase()) {
      case 'pdf': return <FileText className="w-5 h-5 text-red-500" />;
      case 'image': 
      case 'png':
      case 'jpg':
      case 'jpeg': return <Image className="w-5 h-5 text-green-500" />;
      case 'code':
      case 'html':
      case 'css':
      case 'js': return <FileCode className="w-5 h-5 text-blue-500" />;
      case 'text': return <FileText className="w-5 h-5 text-gray-500" />;
      default: return <File className="w-5 h-5 text-purple-500" />;
    }
  };

  const getFileTypeColor = (fileType: string) => {
    switch (fileType.toLowerCase()) {
      case 'pdf': return 'bg-red-100 text-red-800 border-red-200';
      case 'image': 
      case 'png':
      case 'jpg':
      case 'jpeg': return 'bg-green-100 text-green-800 border-green-200';
      case 'code':
      case 'html':
      case 'css':
      case 'js': return 'bg-blue-100 text-blue-800 border-blue-200';
      case 'text': return 'bg-gray-100 text-gray-800 border-gray-200';
      default: return 'bg-purple-100 text-purple-800 border-purple-200';
    }
  };

  const handleView = (deliverable: any) => {
    if (deliverable.content) {
      // Open content in a modal or new window
      const newWindow = window.open('', '_blank');
      if (newWindow) {
        newWindow.document.write(`
          <html>
            <head><title>${deliverable.title}</title></head>
            <body style="font-family: Arial, sans-serif; padding: 20px;">
              <h1>${deliverable.title}</h1>
              <pre style="white-space: pre-wrap;">${deliverable.content}</pre>
            </body>
          </html>
        `);
      }
    }
  };

  const handleDownload = (deliverable: any) => {
    if (deliverable.content) {
      const blob = new Blob([deliverable.content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${deliverable.title}.${deliverable.file_type}`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }
  };

  if (loading) {
    return (
      <div className="flex items-center justify-center h-40">
        <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-purple-600"></div>
      </div>
    );
  }

  return (
    <div className="space-y-4">
      <div className="flex items-center justify-between">
        <h3 className="text-lg font-semibold flex items-center gap-2">
          <Package className="w-5 h-5 text-purple-600" />
          {t[language].deliverables}
        </h3>
        <Badge variant="secondary" className="text-xs">
          {deliverables.length} {deliverables.length === 1 ? 'entregable' : 'entregables'}
        </Badge>
      </div>

      {deliverables.length === 0 ? (
        <Card className="border-dashed border-2 border-slate-200">
          <CardContent className="flex flex-col items-center justify-center py-12">
            <Package className="w-12 h-12 text-slate-400 mb-4" />
            <p className="text-slate-600 font-medium mb-2">{t[language].noDeliverables}</p>
            <p className="text-sm text-slate-500 text-center">
              {t[language].createFirst}
            </p>
          </CardContent>
        </Card>
      ) : (
        <div className="space-y-3">
          {deliverables.map((deliverable) => (
            <Card key={deliverable.id} className="hover:shadow-md transition-shadow">
              <CardContent className="p-4">
                <div className="flex items-start justify-between gap-4">
                  <div className="flex items-start gap-3 flex-1 min-w-0">
                    <div className="mt-1">
                      {getFileIcon(deliverable.file_type)}
                    </div>
                    <div className="flex-1 min-w-0">
                      <h4 className="font-medium text-slate-900 truncate mb-1">
                        {deliverable.title}
                      </h4>
                      
                      {deliverable.description && (
                        <p className="text-sm text-slate-600 mb-2 line-clamp-2">
                          {deliverable.description}
                        </p>
                      )}

                      <div className="flex items-center gap-4 text-xs text-slate-500">
                        <Badge className={`text-xs ${getFileTypeColor(deliverable.file_type)}`}>
                          {deliverable.file_type.toUpperCase()}
                        </Badge>
                        <span>
                          {t[language].createdAt}: {formatDistanceToNow(new Date(deliverable.created_at), { 
                            addSuffix: true,
                            locale: language === 'es' ? es : undefined
                          })}
                        </span>
                      </div>
                    </div>
                  </div>

                  <div className="flex gap-2">
                    {deliverable.content && (
                      <Button
                        size="sm"
                        variant="outline"
                        onClick={() => handleView(deliverable)}
                        className="text-xs"
                      >
                        <Eye className="w-3 h-3 mr-1" />
                        {t[language].view}
                      </Button>
                    )}
                    
                    {(deliverable.content || deliverable.file_url) && (
                      <Button
                        size="sm"
                        onClick={() => handleDownload(deliverable)}
                        className="text-xs bg-purple-600 hover:bg-purple-700"
                      >
                        <Download className="w-3 h-3 mr-1" />
                        {t[language].download}
                      </Button>
                    )}
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
};
