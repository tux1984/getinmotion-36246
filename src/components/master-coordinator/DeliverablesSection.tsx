import React, { useState } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { TaskDeliverable } from '@/hooks/useMasterCoordinator';
import { useLanguage } from '@/context/LanguageContext';
import { 
  FileText, 
  Download, 
  Eye, 
  Calendar, 
  User, 
  FolderOpen,
  Search,
  Filter,
  ExternalLink,
  CheckCircle2,
  Clock,
  Star
} from 'lucide-react';

interface DeliverablesSectionProps {
  deliverables: TaskDeliverable[];
  onDownload: (deliverableId: string) => void;
  onPreview: (deliverableId: string) => void;
}

export const DeliverablesSection: React.FC<DeliverablesSectionProps> = ({
  deliverables,
  onDownload,
  onPreview
}) => {
  const { language } = useLanguage();
  const [filter, setFilter] = useState<'all' | 'recent' | 'important'>('all');
  const [searchTerm, setSearchTerm] = useState('');

  const translations = {
    en: {
      title: 'My Progress',
      subtitle: 'Your completed deliverables and achievements',
      noDeliverables: 'No deliverables yet',
      noDeliverablesDesc: 'Complete tasks to generate your first deliverables',
      download: 'Download',
      preview: 'Preview',
      createdOn: 'Created on',
      fromTask: 'From task',
      searchPlaceholder: 'Search deliverables...',
      filterAll: 'All',
      filterRecent: 'Recent',
      filterImportant: 'Important',
      viewDocument: 'View Document',
      generatedBy: 'Generated by'
    },
    es: {
      title: 'Mis Avances',
      subtitle: 'Tus entregables completados y logros',
      noDeliverables: 'AÃºn no hay entregables',
      noDeliverablesDesc: 'Completa tareas para generar tus primeros entregables',
      download: 'Descargar',
      preview: 'Vista previa',
      createdOn: 'Creado el',
      fromTask: 'De la tarea',
      searchPlaceholder: 'Buscar entregables...',
      filterAll: 'Todos',
      filterRecent: 'Recientes',
      filterImportant: 'Importantes',
      viewDocument: 'Ver Documento',
      generatedBy: 'Generado por'
    }
  };

  const t = translations[language];

  const getFileIcon = (fileType: string) => {
    switch (fileType) {
      case 'pdf':
        return <FileText className="w-5 h-5 text-red-500" />;
      case 'doc':
        return <FileText className="w-5 h-5 text-blue-500" />;
      case 'table':
        return <FileText className="w-5 h-5 text-green-500" />;
      default:
        return <FileText className="w-5 h-5 text-gray-500" />;
    }
  };

  const getFileTypeColor = (fileType: string) => {
    switch (fileType) {
      case 'pdf':
        return 'bg-red-100 text-red-800 dark:bg-red-900/20 dark:text-red-300';
      case 'doc':
        return 'bg-blue-100 text-blue-800 dark:bg-blue-900/20 dark:text-blue-300';
      case 'table':
        return 'bg-green-100 text-green-800 dark:bg-green-900/20 dark:text-green-300';
      default:
        return 'bg-gray-100 text-gray-800 dark:bg-gray-900/20 dark:text-gray-300';
    }
  };

  const filteredDeliverables = deliverables
    .filter(deliverable => {
      const matchesSearch = deliverable.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                          deliverable.description.toLowerCase().includes(searchTerm.toLowerCase());
      
      if (filter === 'recent') {
        const daysSinceCreated = (Date.now() - new Date(deliverable.createdAt).getTime()) / (1000 * 60 * 60 * 24);
        return matchesSearch && daysSinceCreated <= 7;
      }
      
      if (filter === 'important') {
        return matchesSearch && ['pdf', 'table'].includes(deliverable.fileType);
      }
      
      return matchesSearch;
    })
    .sort((a, b) => new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());

  if (deliverables.length === 0) {
    return (
      <Card>
        <CardContent className="p-8 text-center">
          <motion.div
            initial={{ scale: 0.8, opacity: 0 }}
            animate={{ scale: 1, opacity: 1 }}
            className="space-y-4"
          >
            <FolderOpen className="w-16 h-16 text-gray-400 mx-auto" />
            <h3 className="text-xl font-semibold text-gray-600">{t.noDeliverables}</h3>
            <p className="text-gray-500 max-w-md mx-auto">{t.noDeliverablesDesc}</p>
          </motion.div>
        </CardContent>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      
      {/* Header */}
      <Card className="border-primary/20 bg-gradient-to-r from-primary/5 to-secondary/5">
        <CardHeader>
          <CardTitle className="flex items-center space-x-2">
            <Star className="w-5 h-5 text-primary" />
            <span>{t.title}</span>
          </CardTitle>
          <p className="text-muted-foreground">{t.subtitle}</p>
        </CardHeader>
      </Card>

      {/* Filters and Search */}
      <Card>
        <CardContent className="p-4">
          <div className="flex flex-col sm:flex-row gap-4 items-center justify-between">
            
            {/* Search */}
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-muted-foreground" />
              <input
                type="text"
                placeholder={t.searchPlaceholder}
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2 border border-input rounded-md bg-background focus:outline-none focus:ring-2 focus:ring-primary/20"
              />
            </div>

            {/* Filters */}
            <div className="flex items-center space-x-2">
              <Filter className="w-4 h-4 text-muted-foreground" />
              <div className="flex space-x-1">
                {[
                  { key: 'all', label: t.filterAll },
                  { key: 'recent', label: t.filterRecent },
                  { key: 'important', label: t.filterImportant }
                ].map(({ key, label }) => (
                  <Button
                    key={key}
                    variant={filter === key ? 'default' : 'ghost'}
                    size="sm"
                    onClick={() => setFilter(key as any)}
                  >
                    {label}
                  </Button>
                ))}
              </div>
            </div>
          </div>
        </CardContent>
      </Card>

      {/* Deliverables Grid */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
        <AnimatePresence>
          {filteredDeliverables.map((deliverable, index) => (
            <motion.div
              key={deliverable.id}
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              exit={{ opacity: 0, y: -20 }}
              transition={{ delay: index * 0.1 }}
            >
              <Card className="h-full hover:shadow-lg transition-all duration-200 cursor-pointer group">
                <CardHeader className="pb-3">
                  <div className="flex items-start justify-between">
                    <div className="flex items-center space-x-3">
                      {getFileIcon(deliverable.fileType)}
                      <div className="flex-1">
                        <h3 className="font-semibold text-sm leading-tight group-hover:text-primary transition-colors">
                          {deliverable.title}
                        </h3>
                        <Badge variant="secondary" className={`mt-1 text-xs ${getFileTypeColor(deliverable.fileType)}`}>
                          {deliverable.fileType.toUpperCase()}
                        </Badge>
                      </div>
                    </div>
                  </div>
                </CardHeader>

                <CardContent className="pt-0 space-y-4">
                  
                  {/* Description */}
                  <p className="text-sm text-muted-foreground line-clamp-2">
                    {deliverable.description}
                  </p>

                  {/* Metadata */}
                  <div className="space-y-2 text-xs text-muted-foreground">
                    <div className="flex items-center space-x-1">
                      <Calendar className="w-3 h-3" />
                      <span>{t.createdOn} {new Date(deliverable.createdAt).toLocaleDateString()}</span>
                    </div>
                    <div className="flex items-center space-x-1">
                      <User className="w-3 h-3" />
                      <span>{t.generatedBy} {deliverable.agentId}</span>
                    </div>
                  </div>

                  {/* Actions */}
                  <div className="flex space-x-2 pt-2 border-t">
                    <Button
                      size="sm"
                      variant="outline"
                      onClick={() => onPreview(deliverable.id)}
                      className="flex-1"
                    >
                      <Eye className="w-3 h-3 mr-1" />
                      {t.preview}
                    </Button>
                    <Button
                      size="sm"
                      onClick={() => onDownload(deliverable.id)}
                      className="flex-1"
                    >
                      <Download className="w-3 h-3 mr-1" />
                      {t.download}
                    </Button>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </AnimatePresence>
      </div>

      {/* Empty Results */}
      {filteredDeliverables.length === 0 && deliverables.length > 0 && (
        <Card>
          <CardContent className="p-8 text-center">
            <Search className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-semibold text-gray-600 mb-2">
              No se encontraron resultados
            </h3>
            <p className="text-gray-500">
              Intenta con otros tÃ©rminos de bÃºsqueda o cambia el filtro
            </p>
          </CardContent>
        </Card>
      )}
    </div>
  );
};