import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { FileText, Download, Eye, Calendar, User, ChevronDown, ChevronUp } from 'lucide-react';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { useAuth } from '@/context/AuthContext';
import { supabase } from '@/integrations/supabase/client';
import { useToast } from '@/hooks/use-toast';
import { formatDistanceToNow } from 'date-fns';
import { es } from 'date-fns/locale';
import { useLanguage } from '@/context/LanguageContext';

interface Deliverable {
  id: string;
  title: string;
  description?: string;
  file_type: string;
  content?: string;
  file_url?: string;
  agent_id: string;
  created_at: string;
}

interface DeliverablesCenterProps {}

export const DeliverablesCenter: React.FC<DeliverablesCenterProps> = () => {
  const { user } = useAuth();
  const { language } = useLanguage();
  const { toast } = useToast();
  const [deliverables, setDeliverables] = useState<Deliverable[]>([]);
  const [loading, setLoading] = useState(true);
  const [expandedId, setExpandedId] = useState<string | null>(null);

  const normalizedLanguage = language === 'es' ? 'es' : 'en';
  
  const t = {
    en: {
      title: "Deliverables Center",
      empty: "No deliverables generated yet",
      emptyDescription: "Deliverables will appear here as you complete tasks with your agents",
      viewContent: "View Content",
      hideContent: "Hide Content",
      download: "Download",
      generatedBy: "Generated by",
      ago: "ago"
    },
    es: {
      title: "Centro de Entregables",
      empty: "Sin entregables generados aún",
      emptyDescription: "Los entregables aparecerán aquí conforme completes tareas con tus agentes",
      viewContent: "Ver Contenido", 
      hideContent: "Ocultar Contenido",
      download: "Descargar",
      generatedBy: "Generado por",
      ago: "hace"
    }
  };

  const fetchDeliverables = async () => {
    if (!user) return;

    try {
      setLoading(true);
      const { data, error } = await supabase
        .from('agent_deliverables')
        .select('*')
        .eq('user_id', user.id as any)
        .order('created_at', { ascending: false });

      if (error) throw error;
      setDeliverables((data as any) || []);
    } catch (error) {
      console.error('Error fetching deliverables:', error);
      toast({
        title: 'Error',
        description: normalizedLanguage === 'es' 
          ? 'No se pudieron cargar los entregables' 
          : 'Could not load deliverables',
        variant: 'destructive'
      });
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchDeliverables();
  }, [user]);

  const getAgentName = (agentId: string) => {
    const names: Record<string, string> = {
      'marketing-agent': normalizedLanguage === 'es' ? 'Agente de Marketing' : 'Marketing Agent',
      'financial-agent': normalizedLanguage === 'es' ? 'Agente Financiero' : 'Financial Agent',
      'cultural-agent': normalizedLanguage === 'es' ? 'Agente Cultural' : 'Cultural Agent',
      'operations-agent': normalizedLanguage === 'es' ? 'Agente de Operaciones' : 'Operations Agent',
      'strategy-agent': normalizedLanguage === 'es' ? 'Agente Estratégico' : 'Strategy Agent'
    };
    return names[agentId] || agentId;
  };

  const getFileTypeColor = (fileType: string) => {
    const colors: Record<string, string> = {
      'pdf': 'bg-red-100 text-red-800',
      'docx': 'bg-blue-100 text-blue-800',
      'xlsx': 'bg-green-100 text-green-800',
      'text': 'bg-gray-100 text-gray-800',
      'html': 'bg-orange-100 text-orange-800',
      'markdown': 'bg-purple-100 text-purple-800'
    };
    return colors[fileType] || 'bg-gray-100 text-gray-800';
  };

  const handleDownload = (deliverable: Deliverable) => {
    if (deliverable.file_url) {
      window.open(deliverable.file_url, '_blank');
    } else if (deliverable.content) {
      const blob = new Blob([deliverable.content], { type: 'text/plain' });
      const url = URL.createObjectURL(blob);
      const a = document.createElement('a');
      a.href = url;
      a.download = `${deliverable.title}.${deliverable.file_type}`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
    }
  };

  if (loading) {
    return (
      <Card className="p-6">
        <div className="animate-pulse space-y-4">
          <div className="h-6 bg-gray-200 rounded w-1/3"></div>
          <div className="space-y-3">
            {[1, 2, 3].map(i => (
              <div key={i} className="h-16 bg-gray-100 rounded"></div>
            ))}
          </div>
        </div>
      </Card>
    );
  }

  if (deliverables.length === 0) {
    return (
      <Card className="p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4">
          {t[normalizedLanguage].title}
        </h3>
        <div className="text-center py-12">
          <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
          <p className="text-gray-600 mb-2">{t[normalizedLanguage].empty}</p>
          <p className="text-sm text-gray-500">{t[normalizedLanguage].emptyDescription}</p>
        </div>
      </Card>
    );
  }

  return (
    <Card className="p-6">
      <h3 className="text-lg font-semibold text-gray-900 mb-6">
        {t[normalizedLanguage].title}
      </h3>
      
      <div className="space-y-4">
        {deliverables.map((deliverable, index) => (
          <motion.div
            key={deliverable.id}
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: index * 0.1 }}
            className="border border-gray-200 rounded-lg overflow-hidden hover:border-gray-300 transition-colors"
          >
            {/* Deliverable Header */}
            <div className="p-4">
              <div className="flex items-start justify-between">
                <div className="flex items-start gap-3 flex-1">
                  <FileText className="w-5 h-5 text-gray-500 mt-0.5" />
                  <div className="flex-1 min-w-0">
                    <h4 className="font-medium text-gray-900 mb-1">
                      {deliverable.title}
                    </h4>
                    {deliverable.description && (
                      <p className="text-sm text-gray-600 mb-2">
                        {deliverable.description}
                      </p>
                    )}
                    <div className="flex items-center gap-4 text-xs text-gray-500">
                      <div className="flex items-center gap-1">
                        <User className="w-3 h-3" />
                        {getAgentName(deliverable.agent_id)}
                      </div>
                      <div className="flex items-center gap-1">
                        <Calendar className="w-3 h-3" />
                        {formatDistanceToNow(new Date(deliverable.created_at), {
                          addSuffix: true,
                          locale: normalizedLanguage === 'es' ? es : undefined
                        })}
                      </div>
                    </div>
                  </div>
                </div>
                
                <div className="flex items-center gap-2 ml-4">
                  <Badge className={getFileTypeColor(deliverable.file_type)}>
                    {deliverable.file_type.toUpperCase()}
                  </Badge>
                  <Button
                    variant="outline"
                    size="sm"
                    onClick={() => handleDownload(deliverable)}
                  >
                    <Download className="w-3 h-3 mr-1" />
                    {t[normalizedLanguage].download}
                  </Button>
                  {deliverable.content && (
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setExpandedId(
                        expandedId === deliverable.id ? null : deliverable.id
                      )}
                    >
                      <Eye className="w-3 h-3 mr-1" />
                      {expandedId === deliverable.id 
                        ? t[normalizedLanguage].hideContent 
                        : t[normalizedLanguage].viewContent
                      }
                      {expandedId === deliverable.id 
                        ? <ChevronUp className="w-3 h-3 ml-1" />
                        : <ChevronDown className="w-3 h-3 ml-1" />
                      }
                    </Button>
                  )}
                </div>
              </div>
            </div>

            {/* Expandable Content */}
            <AnimatePresence>
              {expandedId === deliverable.id && deliverable.content && (
                <motion.div
                  initial={{ height: 0, opacity: 0 }}
                  animate={{ height: 'auto', opacity: 1 }}
                  exit={{ height: 0, opacity: 0 }}
                  transition={{ duration: 0.3 }}
                  className="border-t border-gray-200 bg-gray-50"
                >
                  <div className="p-4">
                    <pre className="text-sm text-gray-700 whitespace-pre-wrap font-mono bg-white p-4 rounded border max-h-96 overflow-y-auto">
                      {deliverable.content}
                    </pre>
                  </div>
                </motion.div>
              )}
            </AnimatePresence>
          </motion.div>
        ))}
      </div>
    </Card>
  );
};