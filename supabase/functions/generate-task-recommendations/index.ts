
import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.39.3';

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseServiceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

interface TaskRecommendation {
  title: string;
  description: string;
  priority: 1 | 2 | 3;
  agent_id: string;
  relevance: 'high' | 'medium' | 'low';
  estimated_time: number; // in minutes
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { profileData, maturityScores, language, userId, replaceExisting } = await req.json();
    
    console.log('Generate Task Recommendations request:', {
      userId,
      language,
      hasProfileData: !!profileData,
      hasMaturityScores: !!maturityScores
    });

    if (!userId) {
      return new Response(JSON.stringify({ error: 'User ID is required' }), {
        status: 400,
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
      });
    }

    const supabase = createClient(supabaseUrl, supabaseServiceKey);

    // Obtener contexto completo del usuario para generación inteligente
    const { data: userContext } = await supabase
      .from('user_master_context')
      .select('*')
      .eq('user_id', userId)
      .single();

    // Verificar historial de generación para evitar duplicados
    const { data: recentGeneration } = await supabase
      .from('task_generation_history')
      .select('*')
      .eq('user_id', userId)
      .eq('generation_source', 'maturity_calculator')
      .order('created_at', { ascending: false })
      .limit(1)
      .single();

    // Si ya generó tareas recientemente y no es reemplazo explícito, evitar duplicados
    if (recentGeneration && !replaceExisting) {
      const hoursSinceLastGeneration = (Date.now() - new Date(recentGeneration.created_at).getTime()) / (1000 * 60 * 60);
      if (hoursSinceLastGeneration < 24) {
        return new Response(JSON.stringify({ 
          success: true,
          tasksCreated: 0,
          message: language === 'es' 
            ? 'Ya tienes tareas generadas recientemente. Ve al dashboard para verlas.'
            : 'You already have recently generated tasks. Go to dashboard to view them.',
          tasks: []
        }), {
          headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        });
      }
    }

    // Delete existing tasks generated by maturity calculator if requested
    if (replaceExisting) {
      console.log('Deleting existing maturity calculator tasks for user:', userId);
      const { error: deleteError } = await supabase
        .from('agent_tasks')
        .delete()
        .eq('user_id', userId)
        .like('notes', '%Esta tarea fue generada automáticamente%'); // Spanish
      
      // Also delete English generated tasks
      await supabase
        .from('agent_tasks')
        .delete()
        .eq('user_id', userId)
        .like('notes', '%This task was automatically generated%'); // English

      if (deleteError) {
        console.error('Error deleting existing tasks:', deleteError);
      } else {
        console.log('Successfully deleted existing maturity calculator tasks');
      }
    }

    // Generate task recommendations using AI
    let taskRecommendations: TaskRecommendation[] = [];

    if (openAIApiKey && profileData) {
      try {
        // Build detailed user profile with specific information
        const userProfile = `
INFORMACIÓN ESPECÍFICA DEL USUARIO:
- Industria: ${profileData.industry || 'No especificada'}
- Nivel de experiencia: ${profileData.experience || 'No especificada'}
- Actividades específicas: ${profileData.activities ? (Array.isArray(profileData.activities) ? profileData.activities.join(', ') : profileData.activities) : 'No especificadas'}
- Control financiero: ${profileData.financialControl || 'No especificado'}
- Estructura del equipo: ${profileData.teamStructure || 'No especificada'}
- Medios de pago: ${profileData.paymentMethods ? (Array.isArray(profileData.paymentMethods) ? profileData.paymentMethods.join(', ') : profileData.paymentMethods) : 'No especificados'}

RESPUESTAS DETALLADAS DEL USUARIO:
${profileData.extendedAnswers ? Object.entries(profileData.extendedAnswers).map(([key, value]) => `- ${key}: ${value}`).join('\n') : 'Ninguna'}

RESPUESTAS A PREGUNTAS PERSONALIZADAS:
${profileData.dynamicQuestionAnswers ? Object.entries(profileData.dynamicQuestionAnswers).map(([key, value]) => `- ${key}: ${value}`).join('\n') : 'Ninguna'}

PUNTUACIONES DE MADUREZ ACTUAL:
- Validación de idea: ${maturityScores?.ideaValidation || 0}%
- Experiencia de usuario: ${maturityScores?.userExperience || 0}%
- Ajuste al mercado: ${maturityScores?.marketFit || 0}%
- Monetización: ${maturityScores?.monetization || 0}%
        `.trim();

        const systemPrompt = language === 'es' 
          ? `Eres un experto consultor en negocios creativos altamente especializado. Tu trabajo es generar tareas ULTRA-ESPECÍFICAS y PERSONALIZADAS basándote en la información exacta que el usuario proporcionó.

PERFIL DETALLADO DEL USUARIO:
${userProfile}

REGLAS CRÍTICAS PARA PERSONALIZACIÓN:
1. USA LA INFORMACIÓN ESPECÍFICA: Si el usuario mencionó "pintaba chaquetas a mano", las tareas deben referirse específicamente a "pintura de chaquetas a mano", no genéricamente a "productos artesanales"
2. INCORPORA SUS ACTIVIDADES EXACTAS: Usa las actividades, industria y experiencia específicas mencionadas
3. PERSONALIZA SEGÚN SUS RESPUESTAS: Las respuestas detalladas y personalizadas deben influir directamente en las tareas
4. GENERA 6-8 TAREAS HÍPER-ESPECÍFICAS

AGENTES DISPONIBLES:
- admin: Asistente administrativo general
- cultural: Especialista en proyectos creativos y culturales  
- accounting: Asesor financiero
- legal: Consultor legal
- operations: Gerente de operaciones

INSTRUCCIONES DE PRIORIZACIÓN:
1. Prioriza según puntuaciones de madurez más bajas
2. Tareas deben ser accionables en 15-30 días
3. Cada tarea debe referenciar información específica del usuario
4. Incluye tiempo estimado realista (60-180 minutos)

FORMATO REQUERIDO - Responde SOLO con JSON válido:
{
  "tasks": [
    {
      "title": "Título ultra-específico referenciando las actividades exactas del usuario",
      "description": "Descripción detallada que menciona específicamente lo que el usuario hace/vende/crea",
      "priority": 1,
      "agent_id": "cultural",
      "relevance": "high",
      "estimated_time": 120
    }
  ]
}`
          : `You are a highly specialized expert consultant in creative businesses. Your job is to generate ULTRA-SPECIFIC and PERSONALIZED tasks based on the exact information the user provided.

DETAILED USER PROFILE:
${userProfile}

CRITICAL PERSONALIZATION RULES:
1. USE SPECIFIC INFORMATION: If the user mentioned "hand-painting jackets", tasks should specifically reference "hand-painted jackets", not generically "artisanal products"
2. INCORPORATE THEIR EXACT ACTIVITIES: Use the specific activities, industry, and experience mentioned
3. PERSONALIZE BASED ON THEIR ANSWERS: Detailed and personalized responses should directly influence the tasks
4. GENERATE 6-8 HYPER-SPECIFIC TASKS

AVAILABLE AGENTS:
- admin: General administrative assistant
- cultural: Creative and cultural projects specialist
- accounting: Financial advisor
- legal: Legal consultant
- operations: Operations manager

PRIORITIZATION INSTRUCTIONS:
1. Prioritize based on lowest maturity scores
2. Tasks should be actionable within 15-30 days
3. Each task must reference specific user information
4. Include realistic estimated time (60-180 minutes)

REQUIRED FORMAT - Respond ONLY with valid JSON:
{
  "tasks": [
    {
      "title": "Ultra-specific title referencing the user's exact activities",
      "description": "Detailed description that specifically mentions what the user does/sells/creates",
      "priority": 1,
      "agent_id": "cultural",
      "relevance": "high",
      "estimated_time": 120
    }
  ]
}`;

        const response = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${openAIApiKey}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'gpt-4.1-2025-04-14',
            messages: [
              { role: 'system', content: systemPrompt },
              { role: 'user', content: 'Generate highly personalized task recommendations for this specific user. Remember to use their exact activities and information.' }
            ],
            temperature: 0.8,
            max_tokens: 2000,
          }),
        });

        if (response.ok) {
          const data = await response.json();
          const result = data.choices[0].message.content;
          
          try {
            const parsed = JSON.parse(result);
            taskRecommendations = parsed.tasks || [];
            console.log('Generated AI task recommendations:', taskRecommendations.length);
          } catch (parseError) {
            console.error('Failed to parse AI task recommendations:', parseError);
          }
        }
      } catch (aiError) {
        console.error('AI task generation failed:', aiError);
      }
    }

    // Fallback recommendations if AI fails
    if (taskRecommendations.length === 0) {
      console.log('Using fallback task recommendations');
      taskRecommendations = [
        {
          title: language === 'es' ? 'Definir propuesta de valor única' : 'Define unique value proposition',
          description: language === 'es' 
            ? 'Crear una declaración clara de lo que hace único tu proyecto y por qué los usuarios te elegirían'
            : 'Create a clear statement of what makes your project unique and why users would choose you',
          priority: 1,
          agent_id: 'cultural',
          relevance: 'high',
          estimated_time: 90
        },
        {
          title: language === 'es' ? 'Investigar competencia directa' : 'Research direct competition',
          description: language === 'es'
            ? 'Analizar 3-5 proyectos similares para identificar oportunidades de diferenciación'
            : 'Analyze 3-5 similar projects to identify differentiation opportunities',
          priority: 2,
          agent_id: 'cultural',
          relevance: 'high',
          estimated_time: 120
        },
        {
          title: language === 'es' ? 'Establecer métricas clave' : 'Establish key metrics',
          description: language === 'es'
            ? 'Definir 3-5 métricas principales para medir el éxito de tu proyecto'
            : 'Define 3-5 main metrics to measure your project success',
          priority: 2,
          agent_id: 'admin',
          relevance: 'medium',
          estimated_time: 60
        }
      ];
    }

    // Create tasks in the database
    const createdTasks = [];
    for (const taskRec of taskRecommendations) {
      try {
        const { data: task, error } = await supabase
          .from('agent_tasks')
          .insert({
            user_id: userId,
            agent_id: taskRec.agent_id,
            title: taskRec.title,
            description: taskRec.description,
            priority: taskRec.priority,
            status: 'pending',
            relevance: taskRec.relevance,
            progress_percentage: 0,
            time_spent: 0,
            notes: language === 'es' 
              ? `Esta tarea fue generada automáticamente basada en tu perfil. Tiempo estimado: ${taskRec.estimated_time} minutos.`
              : `This task was automatically generated based on your profile. Estimated time: ${taskRec.estimated_time} minutes.`
          })
          .select()
          .single();

        if (error) {
          console.error('Error creating task:', error);
        } else {
          createdTasks.push(task);
          console.log('Created task:', task.title);
        }
      } catch (taskError) {
        console.error('Error creating individual task:', taskError);
      }
    }

    // Actualizar o crear contexto del usuario con información del negocio
    if (profileData) {
      const businessProfile = {
        industry: profileData.industry,
        experience: profileData.experience,
        activities: profileData.activities,
        financialControl: profileData.financialControl,
        teamStructure: profileData.teamStructure,
        paymentMethods: profileData.paymentMethods,
        extendedAnswers: profileData.extendedAnswers,
        dynamicQuestionAnswers: profileData.dynamicQuestionAnswers,
        lastUpdated: new Date().toISOString()
      };

      await supabase
        .from('user_master_context')
        .upsert({
          user_id: userId,
          business_profile: businessProfile,
          task_generation_context: {
            maturityScores,
            language,
            generatedTasks: createdTasks.length,
            lastGeneration: new Date().toISOString()
          },
          language_preference: language,
          last_assessment_date: new Date().toISOString()
        }, { onConflict: 'user_id' });
    }

    // Registrar historial de generación
    await supabase
      .from('task_generation_history')
      .insert({
        user_id: userId,
        generation_source: 'maturity_calculator',
        generation_context: {
          maturityScores,
          profileData: profileData ? 'captured' : 'none',
          language,
          replaceExisting
        },
        tasks_created: createdTasks.length
      });

    console.log(`Successfully created ${createdTasks.length} tasks for user ${userId}`);

    return new Response(JSON.stringify({ 
      success: true,
      tasksCreated: createdTasks.length,
      tasks: createdTasks,
      message: language === 'es' 
        ? `✅ Se generaron ${createdTasks.length} tareas personalizadas basadas en tu perfil específico.`
        : `✅ Generated ${createdTasks.length} personalized tasks based on your specific profile.`
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in generate-task-recommendations function:', error);
    return new Response(JSON.stringify({ 
      error: 'Failed to generate task recommendations',
      details: error.message
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});
