// Conversational shop creation functions for Master Coordinator

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');

// Detect vague responses that need clarification
function isVagueResponse(response: string): boolean {
  const vaguePhrases = [
    'el mismo que', 'la misma que', 'como antes', 'igual que antes',
    'lo mismo', 'como siempre', 'como ya dije', 'ya lo mencion√©',
    'pues', 'eh', 'este', 'bueno', 'si', 's√≠', 'ok', 'vale',
    'normal', 'b√°sico', 'com√∫n', 't√≠pico', 'tradicional'
  ];
  
  const normalizedResponse = response.toLowerCase().trim();
  
  // Check if response is too short (less than 3 words)
  if (normalizedResponse.split(' ').length < 3) return true;
  
  // Check for vague phrases
  return vaguePhrases.some(phrase => normalizedResponse.includes(phrase));
}

// Generate intelligent contextual questions using OpenAI
async function generateIntelligentQuestion(userResponse: string, currentQuestion: string, conversationHistory: any[], userProfile: any, language: string): Promise<string> {
  if (!openAIApiKey) {
    return getDefaultContextualQuestion(currentQuestion, language);
  }

  const prompt = language === 'es' ? `
Eres el Coordinador Maestro, un asistente IA especializado en crear tiendas digitales para artesanos colombianos.

CONTEXT DEL USUARIO:
- Pregunta actual: ${currentQuestion}
- Respuesta del usuario: "${userResponse}"
- Historial de conversaci√≥n: ${JSON.stringify(conversationHistory.slice(-3))}
- Perfil disponible: ${JSON.stringify(userProfile)}

SITUACI√ìN: La respuesta del usuario "${userResponse}" es vaga o insuficiente. 

TU MISI√ìN: Generar una pregunta inteligente, espec√≠fica y conversacional que:
1. Detecte qu√© informaci√≥n concreta necesitas
2. Sea amigable y natural, no rob√≥tica
3. Incluya ejemplos relevantes para artesanos colombianos
4. Ayude al usuario a dar una respuesta m√°s espec√≠fica

EJEMPLOS DE BUENAS PREGUNTAS:
- Si dice "El mismo que yo ten√≠a" ‚Üí "Entiendo que ya ten√≠as un negocio antes. ¬øPodr√≠as contarme espec√≠ficamente qu√© productos vend√≠as? Por ejemplo: ¬øeran bolsos de cuero, cer√°micas, tejidos, joyer√≠a?"
- Si dice "Pues normal" ‚Üí "Claro, quiero entender mejor. ¬øPodr√≠as ser m√°s espec√≠fico? Por ejemplo, ¬øes una ciudad grande como Bogot√° o Medell√≠n, o un pueblo m√°s peque√±o?"

Responde SOLO con la pregunta, sin explicaciones adicionales.
` : `
You are the Master Coordinator, an AI assistant specialized in creating digital shops for Colombian artisans.

USER CONTEXT:
- Current question: ${currentQuestion}  
- User response: "${userResponse}"
- Conversation history: ${JSON.stringify(conversationHistory.slice(-3))}
- Available profile: ${JSON.stringify(userProfile)}

SITUATION: The user's response "${userResponse}" is vague or insufficient.

YOUR MISSION: Generate an intelligent, specific and conversational question that:
1. Detects what concrete information you need
2. Is friendly and natural, not robotic
3. Includes relevant examples for Colombian artisans
4. Helps the user give a more specific response

Respond ONLY with the question, no additional explanations.
`;

  try {
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${openAIApiKey}`,
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        model: 'gpt-4o-mini',
        messages: [
          { role: 'system', content: 'You are an expert conversational AI that generates intelligent, specific questions to clarify vague responses.' },
          { role: 'user', content: prompt }
        ],
        max_tokens: 150,
        temperature: 0.7
      }),
    });

    const data = await response.json();
    return data.choices[0].message.content.trim();
  } catch (error) {
    console.error('Error generating intelligent question:', error);
    return getDefaultContextualQuestion(currentQuestion, language);
  }
}

// Fallback contextual questions
function getDefaultContextualQuestion(currentQuestion: string, language: string): string {
  const questions = {
    es: {
      business_name: 'Entiendo. ¬øPodr√≠as contarme espec√≠ficamente cu√°l es el nombre de tu marca o negocio? Por ejemplo: "Artesan√≠as Luna", "Cer√°mica Andina", etc.',
      business_description: '¬øPodr√≠as ser m√°s espec√≠fico sobre los productos que vendes? Por ejemplo: ¬øtrabajas con cer√°mica, textiles, joyer√≠a, cuero, madera?',
      business_location: 'Claro. ¬øEn qu√© ciudad espec√≠ficamente? Por ejemplo: Bogot√°, Medell√≠n, Cartagena, o alg√∫n municipio particular.',
      craft_type: 'Perfecto. ¬øPodr√≠as darme m√°s detalles sobre el tipo de artesan√≠a? Por ejemplo: ¬øqu√© t√©cnicas usas, qu√© materiales, qu√© tipo de productos espec√≠ficos?'
    },
    en: {
      business_name: 'I understand. Could you tell me specifically what your brand or business name is? For example: "Luna Crafts", "Andean Ceramics", etc.',
      business_description: 'Could you be more specific about the products you sell? For example: do you work with ceramics, textiles, jewelry, leather, wood?',
      business_location: 'Of course. In which city specifically? For example: Bogot√°, Medell√≠n, Cartagena, or a particular municipality.',
      craft_type: 'Perfect. Could you give me more details about the type of craftsmanship? For example: what techniques do you use, what materials, what specific types of products?'
    }
  };

  return questions[language as keyof typeof questions]?.[currentQuestion as keyof typeof questions.es] || 
         'Could you provide more specific details about that?';
}

export async function analyzeProfileForConversation(supabase: any, userId: string, language: string) {
  // Fetch comprehensive user data
  const [profileResult, contextResult, maturityResult] = await Promise.all([
    supabase.from('user_profiles').select('*').eq('user_id', userId).single(),
    supabase.from('user_master_context').select('*').eq('user_id', userId).single(),
    supabase.from('user_maturity_scores').select('*').eq('user_id', userId).order('created_at', { ascending: false }).limit(1).single()
  ]);

  const profile = profileResult.data;
  const masterContext = contextResult.data;
  const maturityScores = maturityResult.data;

  // Analyze what information is missing for shop creation - WITH VAGUE DETECTION
  const missingInfo = [];
  const requiredFields = {
    shop_name: profile?.brand_name || profile?.business_description?.split(' ').slice(0, 3).join(' '),
    description: profile?.business_description,
    craft_type: detectCraftType(profile, masterContext),
    region: profile?.business_location,
    phone: masterContext?.business_profile?.phone,
    email: profile?.email
  };

  // Check for vague responses in existing data
  const hasVagueData = Object.entries(requiredFields).some(([key, value]) => {
    if (typeof value === 'string' && value.length > 0) {
      return isVagueResponse(value);
    }
    return false;
  });

  Object.entries(requiredFields).forEach(([key, value]) => {
    if (!value || value === 'other' || (typeof value === 'string' && isVagueResponse(value))) {
      missingInfo.push(key);
    }
  });

  // Determine if we have enough info to create shop automatically
  const hasMinimumInfo = requiredFields.shop_name && requiredFields.description && requiredFields.craft_type && !hasVagueData;
  const needsMoreInfo = missingInfo.length > 1 || !hasMinimumInfo || hasVagueData;

  let coordinatorMessage;
  let nextQuestion;

  if (!needsMoreInfo) {
    // Can create automatically
    coordinatorMessage = language === 'es' 
      ? `¬°Perfecto! Tengo toda la informaci√≥n necesaria de tu perfil para crear tu tienda digital "${requiredFields.shop_name}". Voy a configurarla autom√°ticamente con IA.`
      : `Perfect! I have all the necessary information from your profile to create your digital shop "${requiredFields.shop_name}". I'll configure it automatically with AI.`;
  } else {
    // Need intelligent conversation
    if (!requiredFields.shop_name || isVagueResponse(requiredFields.shop_name || '')) {
      coordinatorMessage = language === 'es'
        ? '¬°Hola! Soy tu Coordinador Maestro IA ü§ñ Voy a crear la tienda digital perfecta para tu negocio artesanal. Veo que ya tienes experiencia, pero necesito algunos detalles espec√≠ficos. ¬øCu√°l es el nombre exacto de tu marca o negocio?'
        : 'Hello! I\'m your Master AI Coordinator ü§ñ I\'ll create the perfect digital shop for your artisan business. I see you have experience, but I need some specific details. What\'s the exact name of your brand or business?';
      nextQuestion = 'business_name';
    } else if (!requiredFields.description || isVagueResponse(requiredFields.description || '')) {
      coordinatorMessage = language === 'es'
        ? `Perfecto, "${requiredFields.shop_name}" es un excelente nombre. Ahora necesito entender mejor tu artesan√≠a. ¬øQu√© productos espec√≠ficos creas? Por ejemplo: ¬øtrabajas con cer√°mica, textiles, joyer√≠a, cuero, madera? Cu√©ntame los detalles.`
        : `Perfect, "${requiredFields.shop_name}" is an excellent name. Now I need to better understand your craftsmanship. What specific products do you create? For example: do you work with ceramics, textiles, jewelry, leather, wood? Tell me the details.`;
      nextQuestion = 'business_description';
    } else {
      coordinatorMessage = language === 'es'
        ? 'Excelente informaci√≥n sobre tu artesan√≠a. Para optimizar tu tienda para clientes locales, ¬øen qu√© ciudad o regi√≥n espec√≠fica te encuentras? Esto me ayuda a configurar mejor las opciones de env√≠o y marketing local.'
        : 'Excellent information about your craftsmanship. To optimize your shop for local customers, what specific city or region are you in? This helps me better configure shipping options and local marketing.';
      nextQuestion = 'business_location';
    }
  }

  return new Response(JSON.stringify({
    needsMoreInfo,
    coordinatorMessage,
    nextQuestion,
    missingInfo,
    userContext: {
      hasExistingData: !!(profile?.business_description || profile?.brand_name),
      detectedCraft: detectCraftType(profile, masterContext),
      maturityLevel: calculateOverallMaturity(maturityScores)
    },
    shopData: needsMoreInfo ? {} : generateFallbackShopData(profile, masterContext)
  }), {
    headers: { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json' }
  });
}

export async function processConversationStep(supabase: any, userId: string, language: string, userResponse: string, currentQuestion: string, conversationHistory: any[], shopData: any) {
  let updatedShopData = { ...shopData };
  let nextQuestion;
  let message;
  let readyToCreate = false;

  console.log('Processing conversation step:', { currentQuestion, userResponse, isVague: isVagueResponse(userResponse) });

  // INTELLIGENT VAGUE RESPONSE DETECTION
  if (isVagueResponse(userResponse)) {
    console.log('Detected vague response, generating intelligent question');
    
    // Get user profile for context
    const { data: profile } = await supabase.from('user_profiles').select('*').eq('user_id', userId).single();
    
    message = await generateIntelligentQuestion(
      userResponse, 
      currentQuestion, 
      conversationHistory, 
      profile, 
      language
    );
    
    // Keep the same question for retry
    nextQuestion = currentQuestion;
    
    return new Response(JSON.stringify({
      message,
      nextQuestion,
      updatedShopData,
      readyToCreate: false,
      isVagueResponseDetected: true,
      finalShopData: null
    }), {
      headers: { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json' }
    });
  }

  // INTELLIGENT PROCESSING OF SPECIFIC RESPONSES
  switch (currentQuestion) {
    case 'business_name':
      updatedShopData.shop_name = userResponse.trim();
      
      // Generate AI-powered follow-up if OpenAI available
      if (openAIApiKey) {
        try {
          message = await generateContextualResponse(userResponse, 'business_name_confirmation', language, updatedShopData);
        } catch (error) {
          console.error('AI response generation failed, using fallback');
          message = language === 'es'
            ? `¬°Excelente! "${userResponse}" ser√° el nombre de tu tienda. Ahora cu√©ntame espec√≠ficamente qu√© productos artesanales creas. Por ejemplo: ¬øtrabajas con cer√°mica, textiles, joyer√≠a, cuero, madera?`
            : `Excellent! "${userResponse}" will be your shop name. Now tell me specifically what artisan products you create. For example: do you work with ceramics, textiles, jewelry, leather, wood?`;
        }
      } else {
        message = language === 'es'
          ? `¬°Excelente! "${userResponse}" ser√° el nombre de tu tienda. Ahora cu√©ntame espec√≠ficamente qu√© productos artesanales creas.`
          : `Excellent! "${userResponse}" will be your shop name. Now tell me specifically what artisan products you create.`;
      }
      nextQuestion = 'business_description';
      break;

    case 'business_description':
      const detectedCraftType = detectCraftTypeFromText(userResponse);
      updatedShopData.craft_type = detectedCraftType;
      updatedShopData.description = userResponse.trim();
      
      if (openAIApiKey) {
        try {
          message = await generateContextualResponse(userResponse, 'craft_confirmation', language, { ...updatedShopData, detectedCraftType });
        } catch (error) {
          console.error('AI response generation failed, using fallback');
          message = language === 'es'
            ? `Perfecto, detect√© que trabajas con ${detectedCraftType}. Para optimizar tu tienda, ¬øen qu√© ciudad espec√≠fica te encuentras? Esto me ayuda con env√≠os y marketing local.`
            : `Perfect, I detected that you work with ${detectedCraftType}. To optimize your shop, what specific city are you in? This helps me with shipping and local marketing.`;
        }
      } else {
        message = language === 'es'
          ? `Perfecto, detect√© que trabajas con ${detectedCraftType}. ¬øEn qu√© ciudad te encuentras?`
          : `Perfect, I detected that you work with ${detectedCraftType}. What city are you in?`;
      }
      nextQuestion = 'business_location';
      break;

    case 'business_location':
      updatedShopData.region = userResponse.trim();
      
      if (openAIApiKey) {
        try {
          message = await generateContextualResponse(userResponse, 'location_confirmation', language, updatedShopData);
        } catch (error) {
          message = language === 'es'
            ? `¬°Excelente! Ya tengo toda la informaci√≥n esencial para crear tu tienda digital optimizada. La IA va a configurarla autom√°ticamente con toda esta informaci√≥n.`
            : `Excellent! I have all the essential information to create your optimized digital shop. AI will configure it automatically with all this information.`;
        }
      } else {
        message = language === 'es'
          ? `¬°Perfecto! Ya tengo la informaci√≥n necesaria para crear tu tienda digital.`
          : `Perfect! I have the necessary information to create your digital shop.`;
      }
      readyToCreate = true;
      break;

    case 'contact_phone':
      updatedShopData.contact_info = {
        ...updatedShopData.contact_info,
        phone: userResponse.trim(),
        whatsapp: userResponse.trim()
      };
      message = language === 'es'
        ? `¬°Perfecto! Ya tengo toda la informaci√≥n necesaria. La IA est√° creando tu tienda digital optimizada ahora mismo...`
        : `Perfect! I have all the necessary information. AI is creating your optimized digital shop right now...`;
      readyToCreate = true;
      break;

    default:
      message = language === 'es'
        ? 'Gracias por la informaci√≥n. ¬øHay algo m√°s espec√≠fico que quieras contarme sobre tu negocio?'
        : 'Thanks for the information. Is there anything else specific you\'d like to tell me about your business?';
      readyToCreate = Object.keys(updatedShopData).length >= 3;
  }

  // Generate intelligent story if ready to create
  if (readyToCreate) {
    // Import AI story generation
    const { generateIntelligentStory } = await import('./ai-conversation-helpers.ts');
    
    try {
      updatedShopData.story = await generateIntelligentStory(conversationHistory, updatedShopData, language);
    } catch (error) {
      console.error('AI story generation failed, using fallback');
      updatedShopData.story = generateStoryFromConversation(conversationHistory, updatedShopData, language);
    }
    
    updatedShopData.shop_slug = updatedShopData.shop_name?.toLowerCase().replace(/\s+/g, '-').replace(/[^a-z0-9-]/g, '') || 'mi-tienda';
    
    // Set default contact info if not provided
    if (!updatedShopData.contact_info) {
      updatedShopData.contact_info = {
        phone: '',
        email: '',
        whatsapp: ''
      };
    }
    
    if (!updatedShopData.social_links) {
      updatedShopData.social_links = {
        instagram: '',
        facebook: '',
        website: ''
      };
    }
  }

  return new Response(JSON.stringify({
    message,
    nextQuestion,
    updatedShopData,
    readyToCreate,
    finalShopData: readyToCreate ? updatedShopData : null
  }), {
    headers: { 'Access-Control-Allow-Origin': '*', 'Content-Type': 'application/json' }
  });
}

function detectCraftTypeFromText(text: string): string {
  const lowerText = text.toLowerCase();
  
  const craftMappings: Record<string, string> = {
    'tejido': 'textiles', 'textil': 'textiles', 'bordado': 'textiles', 'ropa': 'textiles',
    'cer√°mica': 'ceramics', 'alfarer√≠a': 'ceramics', 'barro': 'ceramics', 'arcilla': 'ceramics',
    'joyer√≠a': 'jewelry', 'orfebrer√≠a': 'jewelry', 'bisuter√≠a': 'jewelry',
    'cuero': 'leather', 'marroquiner√≠a': 'leather', 'bolsos': 'leather',
    'madera': 'woodwork', 'carpinter√≠a': 'woodwork', 'muebles': 'woodwork',
    'metal': 'metalwork', 'forja': 'metalwork', 'hierro': 'metalwork',
    'vidrio': 'glasswork', 'vitral': 'glasswork',
    'pintura': 'painting', 'arte': 'painting', 'cuadros': 'painting',
    'escultura': 'sculpture', 'tallado': 'sculpture'
  };

  for (const [keyword, craftType] of Object.entries(craftMappings)) {
    if (lowerText.includes(keyword)) {
      return craftType;
    }
  }

  return 'other';
}

function generateStoryFromConversation(conversation: any[], shopData: any, language: string): string {
  const businessType = shopData.craft_type || 'artesan√≠a';
  const location = shopData.region || 'Colombia';
  const businessName = shopData.shop_name || 'nuestro negocio';

  if (language === 'es') {
    return `En ${businessName}, nos especializamos en crear ${businessType} √∫nicos y de alta calidad. Ubicados en ${location}, combinamos t√©cnicas tradicionales con un toque moderno para ofrecer productos excepcionales. Cada pieza est√° hecha con amor y dedicaci√≥n, reflejando nuestra pasi√≥n por el arte y la artesan√≠a. Trabajamos con los mejores materiales para garantizar que cada cliente reciba un producto √∫nico que perdure en el tiempo.`;
  } else {
    return `At ${businessName}, we specialize in creating unique and high-quality ${businessType}. Located in ${location}, we combine traditional techniques with a modern touch to offer exceptional products. Each piece is made with love and dedication, reflecting our passion for art and craftsmanship. We work with the best materials to ensure each customer receives a unique product that will last over time.`;
  }
}

// Import AI helper function for contextual responses
async function generateContextualResponse(userResponse: string, responseType: string, language: string, shopData: any): Promise<string> {
  const { generateContextualResponse: aiHelper } = await import('./ai-conversation-helpers.ts');
  return aiHelper(userResponse, responseType, language, shopData);
}

// Helper functions (reuse existing ones)
function detectCraftType(profile: any, masterContext: any): string {
  const textToAnalyze = [
    profile?.business_description || '',
    profile?.brand_name || '',
    masterContext?.business_profile?.description || ''
  ].join(' ').toLowerCase();

  const craftMappings: Record<string, string> = {
    'tejido': 'textiles', 'textil': 'textiles', 'bordado': 'textiles',
    'cer√°mica': 'ceramics', 'alfarer√≠a': 'ceramics', 'barro': 'ceramics',
    'joyer√≠a': 'jewelry', 'orfebrer√≠a': 'jewelry',
    'cuero': 'leather', 'marroquiner√≠a': 'leather',
    'madera': 'woodwork', 'carpinter√≠a': 'woodwork',
    'metal': 'metalwork', 'forja': 'metalwork',
    'vidrio': 'glasswork', 'vitral': 'glasswork',
    'pintura': 'painting', 'arte': 'painting',
    'escultura': 'sculpture'
  };

  for (const [keyword, craftType] of Object.entries(craftMappings)) {
    if (textToAnalyze.includes(keyword)) {
      return craftType;
    }
  }

  return 'other';
}

function calculateOverallMaturity(maturityScores: any): number {
  if (!maturityScores) return 25;
  
  const { idea_validation, user_experience, market_fit, monetization } = maturityScores;
  return Math.round((idea_validation + user_experience + market_fit + monetization) / 4);
}

function generateFallbackShopData(profile: any, masterContext: any) {
  const businessProfile = masterContext?.business_profile || {};
  const socialMedia = profile?.social_media_presence || {};

  return {
    shop_name: profile?.brand_name || profile?.business_description?.split(' ').slice(0, 3).join(' ') || 'Mi Tienda Artesanal',
    description: profile?.business_description || 'Productos artesanales √∫nicos hechos con amor',
    story: businessProfile.story || 'Nuestra tradici√≥n artesanal se transmite de generaci√≥n en generaci√≥n, creando piezas √∫nicas que reflejan la riqueza cultural de Colombia.',
    craft_type: detectCraftType(profile, masterContext) || 'other',
    region: profile?.business_location || '',
    contact_info: {
      phone: businessProfile.phone || '',
      email: profile?.email || '',
      whatsapp: businessProfile.whatsapp || '',
    },
    social_links: {
      instagram: socialMedia.instagram || '',
      facebook: socialMedia.facebook || '',
      website: socialMedia.website || '',
    },
  };
}